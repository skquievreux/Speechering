name: Build and Deploy Voice Transcriber

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      version:
        description:
          "Version to build (optional, uses git tag or auto-increment)"
        required: false
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js for Prettier
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Prettier
        run: npm install -g prettier

      - name: Format code with Prettier
        run: prettier --write "**/*.{md,yml,yaml,json,js,ts,html,css}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install NSIS
        shell: bash
        run: |
          choco install nsis -y

      - name: Determine version
        id: version
        shell: bash
        run: |
          if [ ! -z "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            # Use automated version management
            python scripts/version_manager.py > version.txt
            VERSION=$(cat version.txt)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Update version in files
        shell: bash
        run: |
          # Update version.py
          echo "APP_VERSION = '$VERSION'" > version.py

          # Update .env (create if not exists)
          if [ -f ".env" ]; then
            sed -i "s/APP_VERSION=.*/APP_VERSION=$VERSION/" .env
          else
            echo "APP_VERSION=$VERSION" > .env
          fi

          # Update installer script
          sed -i "s/Name \"Voice Transcriber v[0-9]\+\.[0-9]\+\.[0-9]\+\"/Name \"Voice Transcriber v$VERSION\"/" installer.nsi
          sed -i "s/OutFile \"VoiceTranscriber_Installer_v[0-9]\+\.[0-9]\+\.[0-9]\+\.exe\"/OutFile \"VoiceTranscriber_Installer_v$VERSION.exe\"/" installer.nsi
          sed -i "s/DisplayName \"Voice Transcriber v[0-9]\+\.[0-9]\+\.[0-9]\+\"/DisplayName \"Voice Transcriber v$VERSION\"/" installer.nsi
          sed -i "s/DisplayVersion \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/DisplayVersion \"$VERSION\"/" installer.nsi

          # Update bootstrap installer
          sed -i "s/Name \"Voice Transcriber Bootstrap\"/Name \"Voice Transcriber Bootstrap v$VERSION\"/" bootstrap_installer.nsi
          sed -i "s/OutFile \"VoiceTranscriber_Bootstrap_Installer.exe\"/OutFile \"VoiceTranscriber_Bootstrap_Installer_v$VERSION.exe\"/" bootstrap_installer.nsi
          sed -i "s/DisplayName \"Voice Transcriber Bootstrap v[0-9]\+\.[0-9]\+\.[0-9]\+\"/DisplayName \"Voice Transcriber Bootstrap v$VERSION\"/" bootstrap_installer.nsi

      - name: Generate icon
        shell: bash
        run: |
          cd assets
          python icon_generator.py
          cd ..

      - name: Build VoiceTranscriber EXE
        shell: bash
        run: python build.py

      - name: Build Bootstrap Installer
        shell: bash
        run: python build.py --bootstrap

      - name: Build NSIS Installer
        shell: bash
        run: python build.py --installer

      - name: Create version info
        shell: bash
        run: |
          echo "VERSION=$VERSION" > build_info.txt
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> build_info.txt
          echo "GIT_COMMIT=$GITHUB_SHA" >> build_info.txt
          echo "GIT_REF=$GITHUB_REF" >> build_info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: voice-transcriber-builds-${{ steps.version.outputs.version }}
          path: |
            dist/
            VoiceTranscriber_*.exe
            VoiceTranscriber_Bootstrap_*.exe
            build_info.txt
          retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if:
      github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: voice-transcriber-builds-${{ needs.build.outputs.version }}
          path: artifacts/
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id || github.run_id }}

      - name: Set up Python for deployment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        shell: bash
        run: |
          pip install boto3

      - name: Deploy to Cloudflare R2
        shell: bash
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          python scripts/deploy_to_r2.py

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Voice Transcriber ${{ needs.build.outputs.version }}

            ### Changes
            - Automated build and deployment
            - Bootstrap installer for smaller downloads
            - Cloudflare R2 Storage integration

            ### Downloads
            - [VoiceTranscriber Setup](${{ secrets.R2_PUBLIC_URL }}/installer/Setup_${{ needs.build.outputs.version }}.exe)
            - [VoiceTranscriber EXE](${{ secrets.R2_PUBLIC_URL }}/VoiceTranscriber.exe)
          draft: false
          prerelease: false

  test:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        shell: bash
        run: |
          pytest tests/ -v --cov=src --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Separate job for manual testing of build artifacts
  manual-test:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch'
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: voice-transcriber-builds-${{ needs.build.outputs.version }}
          path: artifacts/

      - name: List downloaded artifacts
        shell: bash
        run: |
          echo "Downloaded artifacts:"
          ls -la artifacts/

      - name: Test EXE execution (basic smoke test)
        shell: bash
        run: |
          cd artifacts
          # Try to run the EXE briefly to check if it's not corrupted
          timeout 10s ./VoiceTranscriber.exe --help || echo "EXE test completed (expected timeout or help output)"
